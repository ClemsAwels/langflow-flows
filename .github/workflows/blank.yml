name: Manage Langflow Flows

on:
  push:
    branches:
      - main

jobs:
  detect_changes:
    runs-on: self-hosted
    outputs:
      added: ${{ steps.changed_files.outputs.added }}
      modified: ${{ steps.changed_files.outputs.modified }}
      deleted: ${{ steps.changed_files.outputs.deleted }}
      flows_added: ${{ steps.changed_files.outputs.flows_added }}
      flows_modified: ${{ steps.changed_files.outputs.flows_modified }}
      flows_deleted: ${{ steps.changed_files.outputs.flows_deleted }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        uses: vegardit/gha-setup-jq@v1
        with:
          version: 1.7.1
          use-cache: true

      - name: Detect file changes (A/M/D)
        id: changed_files
        run: |
          echo "üîç Detecting file changes..."

          CHANGES=$(git diff --name-status "${{ github.event.before }}" "${{ github.sha }}")
          echo "$CHANGES"

          ADDED=$(echo "$CHANGES" | awk '$1 == "A" {print substr($0, index($0,$2))}')
          MODIFIED=$(echo "$CHANGES" | awk '$1 == "M" {print substr($0, index($0,$2))}')
          DELETED=$(echo "$CHANGES" | awk '$1 == "D" {print substr($0, index($0,$2))}')

          FLOWS_ADDED=$(echo "$ADDED" | grep '^flows/' || true)
          FLOWS_MODIFIED=$(echo "$MODIFIED" | grep '^flows/' || true)
          FLOWS_DELETED=$(echo "$DELETED" | grep '^flows/' || true)

          escape() {
            echo "$1" | sed ':a;N;$!ba;s/\n/\\n/g'
          }

          {
            echo "added=$(escape "$ADDED")"
            echo "modified=$(escape "$MODIFIED")"
            echo "deleted=$(escape "$DELETED")"
            echo "flows_added=$(escape "$FLOWS_ADDED")"
            echo "flows_modified=$(escape "$FLOWS_MODIFIED")"
            echo "flows_deleted=$(escape "$FLOWS_DELETED")"
          } >> "$GITHUB_OUTPUT"

      - name: Debug outputs
        run: |
          echo "Added: ${{ steps.changed_files.outputs.added }}"
          echo "Modified: ${{ steps.changed_files.outputs.modified }}"
          echo "Deleted: ${{ steps.changed_files.outputs.deleted }}"
          echo "Flows - Added: ${{ steps.changed_files.outputs.flows_added }}"
          echo "Flows - Modified: ${{ steps.changed_files.outputs.flows_modified }}"
          echo "Flows - Deleted: ${{ steps.changed_files.outputs.flows_deleted }}"

      - name: Send new flows to API
        if: steps.changed_files.outputs.flows_added != ''
        run: |
          echo "üì° Sending added flows to Langflow API..."

          # √âcrire les fichiers ajout√©s dans un fichier temporaire
          echo "${{ steps.changed_files.outputs.flows_added }}" > flows_to_send.txt

          # Lire chaque fichier du fichier temporaire
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "‚û°Ô∏è Sending \"$file\""
              curl -X POST "http://localhost:7860/api/v1/flows/" \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                --data-binary "@$file"
            else
              echo "‚ö†Ô∏è File not found: \"$file\""
            fi
          done < flows_to_send.txt

      - name: Handle deleted flows
        if: steps.changed_files.outputs.flows_deleted != ''
        run: |
          echo "üì° Handling deleted flows in Langflow API..."

          # √âcrire les fichiers supprim√©s dans un fichier temporaire
          echo "${{ steps.changed_files.outputs.flows_deleted }}" > flows_to_delete.txt

          # Lire chaque fichier du fichier temporaire pour suppression via l'API Langflow
          while IFS= read -r file; do
            if [ ! -f "$file" ]; then  # V√©rifie que le fichier est bien supprim√© localement
              FLOW_NAME=$(basename "$file" .json)  # Extrait le nom du flow sans extension

              # R√©cup√©rer tous les flows existants via l'API Langflow
              LANGFLOW_URL="http://localhost:7860"
              url="${LANGFLOW_URL}/api/v1/flows/"
              params="remove_example_flows=true&components_only=false&get_all=true&header_flows=false&page=1&size=50"

              response=$(curl -s -X GET "${url}?${params}" -H "accept: application/json")
              
              if [ $? -eq 0 ]; then
                flow_id=$(echo "$response" | jq --arg FLOW_NAME "$FLOW_NAME" '.[] | select(.name == $FLOW_NAME) | .id')

                if [ ! -z "$flow_id" ]; then
                  delete_url="${LANGFLOW_URL}/api/v1/flows/${flow_id}"
                  delete_response=$(curl -s -X DELETE "${delete_url}" -H "accept: application/json")

                  if [ $? -eq 0 ]; then
                    echo "‚úÖ Flow \"$FLOW_NAME\" (ID : $flow_id) supprim√© avec succ√®s."
                  else
                    echo "‚ùå Erreur lors de la suppression du flow \"$FLOW_NAME\"."
                  fi
                else
                  echo "‚ö†Ô∏è Aucun flow trouv√© avec le nom \"$FLOW_NAME\"."
                fi
              else
                echo "‚ùå Erreur lors de la r√©cup√©ration des flows depuis l'API."
              fi
            fi
          done < flows_to_delete.txt
