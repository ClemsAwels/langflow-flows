name: Suppression des Flows Langflow

on:
  push:
    branches:
      - main

jobs:
  delete_flows:
    runs-on: self-hosted

    steps:
      - name: R√©cup√©rer le d√©p√¥t
        uses: actions/checkout@v3

      - name: D√©tecter les fichiers supprim√©s
        id: detect_deleted_files
        run: |
          echo "üîç D√©tection des fichiers supprim√©s..."
          CHANGES=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }})
          echo "$CHANGES"

          # Filtrer uniquement les fichiers supprim√©s dans le dossier "flows/"
          DELETED=$(echo "$CHANGES" | awk '$1 == "D" {print $2}' | grep '^flows/' || true)

          # Exporter les fichiers supprim√©s comme sortie
          echo "deleted_flows=$DELETED" >> "$GITHUB_OUTPUT"

      - name: Supprimer les flows via l'API Langflow
        if: steps.detect_deleted_files.outputs.deleted_flows != ''
        run: |
          echo "üì° Suppression des flows via l'API Langflow..."

          # √âcrire les fichiers supprim√©s dans un fichier temporaire
          echo "${{ steps.detect_deleted_files.outputs.deleted_flows }}" > deleted_flows.txt

          # Installer Python et les d√©pendances n√©cessaires
          python -m pip install requests

          # Script Python pour supprimer les flows
          python <<EOF
          import requests
          import json

          LANGFLOW_URL = "http://192.168.1.21:7860"  # Remplace par ton URL r√©elle

          # Lire les fichiers supprim√©s
          with open("deleted_flows.txt", "r") as f:
              deleted_files = [line.strip() for line in f if line.strip()]

          for file_path in deleted_files:
              try:
                  # Charger le nom du flow depuis le fichier JSON (si disponible)
                  with open(file_path, "r", encoding="utf-8") as flow_file:
                      flow_name = json.load(flow_file)["name"]

                  # Obtenir la liste des flows depuis l'API
                  url = f"{LANGFLOW_URL}/api/v1/flows/"
                  params = {
                      "remove_example_flows": "true",
                      "components_only": "false",
                      "get_all": "true",
                      "header_flows": "false",
                      "page": 1,
                      "size": 50
                  }
                  headers = {"accept": "application/json"}
                  response = requests.get(url, params=params, headers=headers)

                  if response.status_code == 200:
                      data = response.json()
                      for flow in data:
                          if flow["name"] == flow_name:
                              flow_id = flow["id"]
                              print(f"‚û°Ô∏è Suppression du flow avec ID : {flow_id}")

                              # Supprimer le flow via l'API
                              delete_url = f"{LANGFLOW_URL}/api/v1/flows/{flow_id}"
                              delete_response = requests.delete(delete_url, headers=headers)

                              if delete_response.status_code == 200:
                                  print(f"‚úÖ Flow '{flow_name}' supprim√© avec succ√®s.")
                              else:
                                  print(f"‚ö†Ô∏è Erreur lors de la suppression du flow '{flow_name}': {delete_response.status_code}, {delete_response.text}")
                  else:
                      print(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des flows : {response.status_code}, {response.text}")
              except Exception as e:
                  print(f"‚ö†Ô∏è Impossible de traiter le fichier '{file_path}': {e}")
          EOF
